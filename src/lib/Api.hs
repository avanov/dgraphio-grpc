{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Api where

import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
 
data Dgraph request response = Dgraph{dgraphLogin ::
                                      request 'HsGRPC.Normal Api.LoginRequest Api.Response ->
                                        Hs.IO (response 'HsGRPC.Normal Api.Response),
                                      dgraphQuery ::
                                      request 'HsGRPC.Normal Api.Request Api.Response ->
                                        Hs.IO (response 'HsGRPC.Normal Api.Response),
                                      dgraphAlter ::
                                      request 'HsGRPC.Normal Api.Operation Api.Payload ->
                                        Hs.IO (response 'HsGRPC.Normal Api.Payload),
                                      dgraphCommitOrAbort ::
                                      request 'HsGRPC.Normal Api.TxnContext Api.TxnContext ->
                                        Hs.IO (response 'HsGRPC.Normal Api.TxnContext),
                                      dgraphCheckVersion ::
                                      request 'HsGRPC.Normal Api.Check Api.Version ->
                                        Hs.IO (response 'HsGRPC.Normal Api.Version)}
                             deriving Hs.Generic
 
dgraphServer ::
               Dgraph HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                 HsGRPC.ServiceOptions -> Hs.IO ()
dgraphServer
  Dgraph{dgraphLogin = dgraphLogin, dgraphQuery = dgraphQuery,
         dgraphAlter = dgraphAlter,
         dgraphCommitOrAbort = dgraphCommitOrAbort,
         dgraphCheckVersion = dgraphCheckVersion}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler (HsGRPC.MethodName "/api.Dgraph/Login")
                                   (HsGRPC.convertGeneratedServerHandler dgraphLogin)),
                                (HsGRPC.UnaryHandler (HsGRPC.MethodName "/api.Dgraph/Query")
                                   (HsGRPC.convertGeneratedServerHandler dgraphQuery)),
                                (HsGRPC.UnaryHandler (HsGRPC.MethodName "/api.Dgraph/Alter")
                                   (HsGRPC.convertGeneratedServerHandler dgraphAlter)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/api.Dgraph/CommitOrAbort")
                                   (HsGRPC.convertGeneratedServerHandler dgraphCommitOrAbort)),
                                (HsGRPC.UnaryHandler (HsGRPC.MethodName "/api.Dgraph/CheckVersion")
                                   (HsGRPC.convertGeneratedServerHandler dgraphCheckVersion))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
dgraphClient ::
               HsGRPC.Client ->
                 Hs.IO (Dgraph HsGRPC.ClientRequest HsGRPC.ClientResult)
dgraphClient client
  = (Hs.pure Dgraph) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/api.Dgraph/Login")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/api.Dgraph/Query")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/api.Dgraph/Alter")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/api.Dgraph/CommitOrAbort")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/api.Dgraph/CheckVersion")))
 
data Request = Request{requestStartTs :: Hs.Word64,
                       requestQuery :: Hs.Text, requestVars :: Hs.Map Hs.Text Hs.Text,
                       requestReadOnly :: Hs.Bool, requestBestEffort :: Hs.Bool,
                       requestMutations :: Hs.Vector Api.Mutation,
                       requestCommitNow :: Hs.Bool}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Request where
        nameOf _ = (Hs.fromString "Request")
 
instance HsProtobuf.HasDefault Request
 
instance HsProtobuf.Message Request where
        encodeMessage _
          Request{requestStartTs = requestStartTs,
                  requestQuery = requestQuery, requestVars = requestVars,
                  requestReadOnly = requestReadOnly,
                  requestBestEffort = requestBestEffort,
                  requestMutations = requestMutations,
                  requestCommitNow = requestCommitNow}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   requestStartTs),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   requestQuery),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   requestVars),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   requestReadOnly),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   requestBestEffort),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 12)
                   (Hs.coerce @(Hs.Vector Api.Mutation)
                      @(HsProtobuf.NestedVec Api.Mutation)
                      requestMutations)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 13)
                   requestCommitNow)])
        decodeMessage _
          = (Hs.pure Request) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 7))
              <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Api.Mutation))
                 @(_ (Hs.Vector Api.Mutation))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 12)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 13))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "start_ts")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Map HsProtobuf.String HsProtobuf.String)
                (HsProtobuf.Single "vars")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "read_only")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "best_effort")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 12)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Mutation")))
                (HsProtobuf.Single "mutations")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 13)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "commit_now")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Request where
        toJSONPB (Request f1 f4 f5 f6 f7 f12 f13)
          = (HsJSONPB.object
               ["start_ts" .= f1, "query" .= f4, "vars" .= f5, "read_only" .= f6,
                "best_effort" .= f7, "mutations" .= f12, "commit_now" .= f13])
        toEncodingPB (Request f1 f4 f5 f6 f7 f12 f13)
          = (HsJSONPB.pairs
               ["start_ts" .= f1, "query" .= f4, "vars" .= f5, "read_only" .= f6,
                "best_effort" .= f7, "mutations" .= f12, "commit_now" .= f13])
 
instance HsJSONPB.FromJSONPB Request where
        parseJSONPB
          = (HsJSONPB.withObject "Request"
               (\ obj ->
                  (Hs.pure Request) <*> obj .: "start_ts" <*> obj .: "query" <*>
                    obj .: "vars"
                    <*> obj .: "read_only"
                    <*> obj .: "best_effort"
                    <*> obj .: "mutations"
                    <*> obj .: "commit_now"))
 
instance HsJSONPB.ToJSON Request where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Request where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Request where
        declareNamedSchema _
          = do let declare_start_ts = HsJSONPB.declareSchemaRef
               requestStartTs <- declare_start_ts Proxy.Proxy
               let declare_query = HsJSONPB.declareSchemaRef
               requestQuery <- declare_query Proxy.Proxy
               let declare_vars = HsJSONPB.declareSchemaRef
               requestVars <- declare_vars Proxy.Proxy
               let declare_read_only = HsJSONPB.declareSchemaRef
               requestReadOnly <- declare_read_only Proxy.Proxy
               let declare_best_effort = HsJSONPB.declareSchemaRef
               requestBestEffort <- declare_best_effort Proxy.Proxy
               let declare_mutations = HsJSONPB.declareSchemaRef
               requestMutations <- declare_mutations Proxy.Proxy
               let declare_commit_now = HsJSONPB.declareSchemaRef
               requestCommitNow <- declare_commit_now Proxy.Proxy
               let _ = Hs.pure Request <*> HsJSONPB.asProxy declare_start_ts <*>
                         HsJSONPB.asProxy declare_query
                         <*> HsJSONPB.asProxy declare_vars
                         <*> HsJSONPB.asProxy declare_read_only
                         <*> HsJSONPB.asProxy declare_best_effort
                         <*> HsJSONPB.asProxy declare_mutations
                         <*> HsJSONPB.asProxy declare_commit_now
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Request",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("start_ts", requestStartTs),
                                                        ("query", requestQuery),
                                                        ("vars", requestVars),
                                                        ("read_only", requestReadOnly),
                                                        ("best_effort", requestBestEffort),
                                                        ("mutations", requestMutations),
                                                        ("commit_now", requestCommitNow)]}})
 
data Uids = Uids{uidsUids :: Hs.Vector Hs.Text}
          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Uids where
        nameOf _ = (Hs.fromString "Uids")
 
instance HsProtobuf.HasDefault Uids
 
instance HsProtobuf.Message Uids where
        encodeMessage _ Uids{uidsUids = uidsUids}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      uidsUids))])
        decodeMessage _
          = (Hs.pure Uids) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "uids")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Uids where
        toJSONPB (Uids f1) = (HsJSONPB.object ["uids" .= f1])
        toEncodingPB (Uids f1) = (HsJSONPB.pairs ["uids" .= f1])
 
instance HsJSONPB.FromJSONPB Uids where
        parseJSONPB
          = (HsJSONPB.withObject "Uids"
               (\ obj -> (Hs.pure Uids) <*> obj .: "uids"))
 
instance HsJSONPB.ToJSON Uids where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Uids where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Uids where
        declareNamedSchema _
          = do let declare_uids = HsJSONPB.declareSchemaRef
               uidsUids <- declare_uids Proxy.Proxy
               let _ = Hs.pure Uids <*> HsJSONPB.asProxy declare_uids
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Uids",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList [("uids", uidsUids)]}})
 
data Response = Response{responseJson :: Hs.ByteString,
                         responseTxn :: Hs.Maybe Api.TxnContext,
                         responseLatency :: Hs.Maybe Api.Latency,
                         responseMetrics :: Hs.Maybe Api.Metrics,
                         responseUids :: Hs.Map Hs.Text Hs.Text}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Response where
        nameOf _ = (Hs.fromString "Response")
 
instance HsProtobuf.HasDefault Response
 
instance HsProtobuf.Message Response where
        encodeMessage _
          Response{responseJson = responseJson, responseTxn = responseTxn,
                   responseLatency = responseLatency,
                   responseMetrics = responseMetrics, responseUids = responseUids}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   responseJson),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Api.TxnContext)
                      @(HsProtobuf.Nested Api.TxnContext)
                      responseTxn)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Api.Latency) @(HsProtobuf.Nested Api.Latency)
                      responseLatency)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Api.Metrics) @(HsProtobuf.Nested Api.Metrics)
                      responseMetrics)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 12)
                   responseUids)])
        decodeMessage _
          = (Hs.pure Response) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Api.TxnContext))
                 @(_ (Hs.Maybe Api.TxnContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Api.Latency))
                 @(_ (Hs.Maybe Api.Latency))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Api.Metrics))
                 @(_ (Hs.Maybe Api.Metrics))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 12))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "json")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TxnContext")))
                (HsProtobuf.Single "txn")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Latency")))
                (HsProtobuf.Single "latency")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Metrics")))
                (HsProtobuf.Single "metrics")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 12)
                (HsProtobuf.Map HsProtobuf.String HsProtobuf.String)
                (HsProtobuf.Single "uids")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Response where
        toJSONPB (Response f1 f2 f3 f4 f12)
          = (HsJSONPB.object
               ["json" .= f1, "txn" .= f2, "latency" .= f3, "metrics" .= f4,
                "uids" .= f12])
        toEncodingPB (Response f1 f2 f3 f4 f12)
          = (HsJSONPB.pairs
               ["json" .= f1, "txn" .= f2, "latency" .= f3, "metrics" .= f4,
                "uids" .= f12])
 
instance HsJSONPB.FromJSONPB Response where
        parseJSONPB
          = (HsJSONPB.withObject "Response"
               (\ obj ->
                  (Hs.pure Response) <*> obj .: "json" <*> obj .: "txn" <*>
                    obj .: "latency"
                    <*> obj .: "metrics"
                    <*> obj .: "uids"))
 
instance HsJSONPB.ToJSON Response where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Response where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Response where
        declareNamedSchema _
          = do let declare_json = HsJSONPB.declareSchemaRef
               responseJson <- declare_json Proxy.Proxy
               let declare_txn = HsJSONPB.declareSchemaRef
               responseTxn <- declare_txn Proxy.Proxy
               let declare_latency = HsJSONPB.declareSchemaRef
               responseLatency <- declare_latency Proxy.Proxy
               let declare_metrics = HsJSONPB.declareSchemaRef
               responseMetrics <- declare_metrics Proxy.Proxy
               let declare_uids = HsJSONPB.declareSchemaRef
               responseUids <- declare_uids Proxy.Proxy
               let _ = Hs.pure Response <*> HsJSONPB.asProxy declare_json <*>
                         HsJSONPB.asProxy declare_txn
                         <*> HsJSONPB.asProxy declare_latency
                         <*> HsJSONPB.asProxy declare_metrics
                         <*> HsJSONPB.asProxy declare_uids
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Response",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("json", responseJson),
                                                        ("txn", responseTxn),
                                                        ("latency", responseLatency),
                                                        ("metrics", responseMetrics),
                                                        ("uids", responseUids)]}})
 
data Mutation = Mutation{mutationSetJson :: Hs.ByteString,
                         mutationDeleteJson :: Hs.ByteString,
                         mutationSetNquads :: Hs.ByteString,
                         mutationDelNquads :: Hs.ByteString,
                         mutationSet :: Hs.Vector Api.NQuad,
                         mutationDel :: Hs.Vector Api.NQuad, mutationCond :: Hs.Text,
                         mutationCommitNow :: Hs.Bool}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Mutation where
        nameOf _ = (Hs.fromString "Mutation")
 
instance HsProtobuf.HasDefault Mutation
 
instance HsProtobuf.Message Mutation where
        encodeMessage _
          Mutation{mutationSetJson = mutationSetJson,
                   mutationDeleteJson = mutationDeleteJson,
                   mutationSetNquads = mutationSetNquads,
                   mutationDelNquads = mutationDelNquads, mutationSet = mutationSet,
                   mutationDel = mutationDel, mutationCond = mutationCond,
                   mutationCommitNow = mutationCommitNow}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   mutationSetJson),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   mutationDeleteJson),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   mutationSetNquads),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   mutationDelNquads),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   (Hs.coerce @(Hs.Vector Api.NQuad) @(HsProtobuf.NestedVec Api.NQuad)
                      mutationSet)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   (Hs.coerce @(Hs.Vector Api.NQuad) @(HsProtobuf.NestedVec Api.NQuad)
                      mutationDel)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                   mutationCond),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 14)
                   mutationCommitNow)])
        decodeMessage _
          = (Hs.pure Mutation) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Api.NQuad))
                 @(_ (Hs.Vector Api.NQuad))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 5)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Api.NQuad))
                 @(_ (Hs.Vector Api.NQuad))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 6)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 9))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 14))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "set_json")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "delete_json")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "set_nquads")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "del_nquads")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "NQuad")))
                (HsProtobuf.Single "set")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "NQuad")))
                (HsProtobuf.Single "del")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 9)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "cond")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 14)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "commit_now")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Mutation where
        toJSONPB (Mutation f1 f2 f3 f4 f5 f6 f9 f14)
          = (HsJSONPB.object
               ["set_json" .= f1, "delete_json" .= f2, "set_nquads" .= f3,
                "del_nquads" .= f4, "set" .= f5, "del" .= f6, "cond" .= f9,
                "commit_now" .= f14])
        toEncodingPB (Mutation f1 f2 f3 f4 f5 f6 f9 f14)
          = (HsJSONPB.pairs
               ["set_json" .= f1, "delete_json" .= f2, "set_nquads" .= f3,
                "del_nquads" .= f4, "set" .= f5, "del" .= f6, "cond" .= f9,
                "commit_now" .= f14])
 
instance HsJSONPB.FromJSONPB Mutation where
        parseJSONPB
          = (HsJSONPB.withObject "Mutation"
               (\ obj ->
                  (Hs.pure Mutation) <*> obj .: "set_json" <*> obj .: "delete_json"
                    <*> obj .: "set_nquads"
                    <*> obj .: "del_nquads"
                    <*> obj .: "set"
                    <*> obj .: "del"
                    <*> obj .: "cond"
                    <*> obj .: "commit_now"))
 
instance HsJSONPB.ToJSON Mutation where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Mutation where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Mutation where
        declareNamedSchema _
          = do let declare_set_json = HsJSONPB.declareSchemaRef
               mutationSetJson <- declare_set_json Proxy.Proxy
               let declare_delete_json = HsJSONPB.declareSchemaRef
               mutationDeleteJson <- declare_delete_json Proxy.Proxy
               let declare_set_nquads = HsJSONPB.declareSchemaRef
               mutationSetNquads <- declare_set_nquads Proxy.Proxy
               let declare_del_nquads = HsJSONPB.declareSchemaRef
               mutationDelNquads <- declare_del_nquads Proxy.Proxy
               let declare_set = HsJSONPB.declareSchemaRef
               mutationSet <- declare_set Proxy.Proxy
               let declare_del = HsJSONPB.declareSchemaRef
               mutationDel <- declare_del Proxy.Proxy
               let declare_cond = HsJSONPB.declareSchemaRef
               mutationCond <- declare_cond Proxy.Proxy
               let declare_commit_now = HsJSONPB.declareSchemaRef
               mutationCommitNow <- declare_commit_now Proxy.Proxy
               let _ = Hs.pure Mutation <*> HsJSONPB.asProxy declare_set_json <*>
                         HsJSONPB.asProxy declare_delete_json
                         <*> HsJSONPB.asProxy declare_set_nquads
                         <*> HsJSONPB.asProxy declare_del_nquads
                         <*> HsJSONPB.asProxy declare_set
                         <*> HsJSONPB.asProxy declare_del
                         <*> HsJSONPB.asProxy declare_cond
                         <*> HsJSONPB.asProxy declare_commit_now
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Mutation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("set_json", mutationSetJson),
                                                        ("delete_json", mutationDeleteJson),
                                                        ("set_nquads", mutationSetNquads),
                                                        ("del_nquads", mutationDelNquads),
                                                        ("set", mutationSet), ("del", mutationDel),
                                                        ("cond", mutationCond),
                                                        ("commit_now", mutationCommitNow)]}})
 
data Operation = Operation{operationSchema :: Hs.Text,
                           operationDropAttr :: Hs.Text, operationDropAll :: Hs.Bool,
                           operationDropOp :: HsProtobuf.Enumerated Api.Operation_DropOp,
                           operationDropValue :: Hs.Text}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Operation where
        nameOf _ = (Hs.fromString "Operation")
 
instance HsProtobuf.HasDefault Operation
 
instance HsProtobuf.Message Operation where
        encodeMessage _
          Operation{operationSchema = operationSchema,
                    operationDropAttr = operationDropAttr,
                    operationDropAll = operationDropAll,
                    operationDropOp = operationDropOp,
                    operationDropValue = operationDropValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   operationSchema),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   operationDropAttr),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   operationDropAll),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   operationDropOp),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   operationDropValue)])
        decodeMessage _
          = (Hs.pure Operation) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "schema")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "drop_attr")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "drop_all")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "DropOp")))
                (HsProtobuf.Single "drop_op")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "drop_value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Operation where
        toJSONPB (Operation f1 f2 f3 f4 f5)
          = (HsJSONPB.object
               ["schema" .= f1, "drop_attr" .= f2, "drop_all" .= f3,
                "drop_op" .= f4, "drop_value" .= f5])
        toEncodingPB (Operation f1 f2 f3 f4 f5)
          = (HsJSONPB.pairs
               ["schema" .= f1, "drop_attr" .= f2, "drop_all" .= f3,
                "drop_op" .= f4, "drop_value" .= f5])
 
instance HsJSONPB.FromJSONPB Operation where
        parseJSONPB
          = (HsJSONPB.withObject "Operation"
               (\ obj ->
                  (Hs.pure Operation) <*> obj .: "schema" <*> obj .: "drop_attr" <*>
                    obj .: "drop_all"
                    <*> obj .: "drop_op"
                    <*> obj .: "drop_value"))
 
instance HsJSONPB.ToJSON Operation where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Operation where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Operation where
        declareNamedSchema _
          = do let declare_schema = HsJSONPB.declareSchemaRef
               operationSchema <- declare_schema Proxy.Proxy
               let declare_drop_attr = HsJSONPB.declareSchemaRef
               operationDropAttr <- declare_drop_attr Proxy.Proxy
               let declare_drop_all = HsJSONPB.declareSchemaRef
               operationDropAll <- declare_drop_all Proxy.Proxy
               let declare_drop_op = HsJSONPB.declareSchemaRef
               operationDropOp <- declare_drop_op Proxy.Proxy
               let declare_drop_value = HsJSONPB.declareSchemaRef
               operationDropValue <- declare_drop_value Proxy.Proxy
               let _ = Hs.pure Operation <*> HsJSONPB.asProxy declare_schema <*>
                         HsJSONPB.asProxy declare_drop_attr
                         <*> HsJSONPB.asProxy declare_drop_all
                         <*> HsJSONPB.asProxy declare_drop_op
                         <*> HsJSONPB.asProxy declare_drop_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Operation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("schema", operationSchema),
                                                        ("drop_attr", operationDropAttr),
                                                        ("drop_all", operationDropAll),
                                                        ("drop_op", operationDropOp),
                                                        ("drop_value", operationDropValue)]}})
 
data Operation_DropOp = Operation_DropOpNONE
                      | Operation_DropOpALL
                      | Operation_DropOpDATA
                      | Operation_DropOpATTR
                      | Operation_DropOpTYPE
                      deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Operation_DropOp where
        nameOf _ = (Hs.fromString "Operation_DropOp")
 
instance HsProtobuf.HasDefault Operation_DropOp
 
instance Hs.Bounded Operation_DropOp where
        minBound = Operation_DropOpNONE
        maxBound = Operation_DropOpTYPE
 
instance Hs.Ord Operation_DropOp where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum Operation_DropOp where
        toProtoEnumMay 0 = Hs.Just Operation_DropOpNONE
        toProtoEnumMay 1 = Hs.Just Operation_DropOpALL
        toProtoEnumMay 2 = Hs.Just Operation_DropOpDATA
        toProtoEnumMay 3 = Hs.Just Operation_DropOpATTR
        toProtoEnumMay 4 = Hs.Just Operation_DropOpTYPE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (Operation_DropOpNONE) = 0
        fromProtoEnum (Operation_DropOpALL) = 1
        fromProtoEnum (Operation_DropOpDATA) = 2
        fromProtoEnum (Operation_DropOpATTR) = 3
        fromProtoEnum (Operation_DropOpTYPE) = 4
 
instance HsJSONPB.ToJSONPB Operation_DropOp where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB Operation_DropOp where
        parseJSONPB (HsJSONPB.String "NONE") = Hs.pure Operation_DropOpNONE
        parseJSONPB (HsJSONPB.String "ALL") = Hs.pure Operation_DropOpALL
        parseJSONPB (HsJSONPB.String "DATA") = Hs.pure Operation_DropOpDATA
        parseJSONPB (HsJSONPB.String "ATTR") = Hs.pure Operation_DropOpATTR
        parseJSONPB (HsJSONPB.String "TYPE") = Hs.pure Operation_DropOpTYPE
        parseJSONPB v = (HsJSONPB.typeMismatch "Operation_DropOp" v)
 
instance HsJSONPB.ToJSON Operation_DropOp where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Operation_DropOp where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite Operation_DropOp
 
data Payload = Payload{payloadData :: Hs.ByteString}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Payload where
        nameOf _ = (Hs.fromString "Payload")
 
instance HsProtobuf.HasDefault Payload
 
instance HsProtobuf.Message Payload where
        encodeMessage _ Payload{payloadData = payloadData}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   payloadData)])
        decodeMessage _
          = (Hs.pure Payload) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "Data")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Payload where
        toJSONPB (Payload f1) = (HsJSONPB.object ["Data" .= f1])
        toEncodingPB (Payload f1) = (HsJSONPB.pairs ["Data" .= f1])
 
instance HsJSONPB.FromJSONPB Payload where
        parseJSONPB
          = (HsJSONPB.withObject "Payload"
               (\ obj -> (Hs.pure Payload) <*> obj .: "Data"))
 
instance HsJSONPB.ToJSON Payload where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Payload where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Payload where
        declareNamedSchema _
          = do let declare_Data = HsJSONPB.declareSchemaRef
               payloadData <- declare_Data Proxy.Proxy
               let _ = Hs.pure Payload <*> HsJSONPB.asProxy declare_Data
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Payload",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("Data", payloadData)]}})
 
data TxnContext = TxnContext{txnContextStartTs :: Hs.Word64,
                             txnContextCommitTs :: Hs.Word64, txnContextAborted :: Hs.Bool,
                             txnContextKeys :: Hs.Vector Hs.Text,
                             txnContextPreds :: Hs.Vector Hs.Text}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnContext where
        nameOf _ = (Hs.fromString "TxnContext")
 
instance HsProtobuf.HasDefault TxnContext
 
instance HsProtobuf.Message TxnContext where
        encodeMessage _
          TxnContext{txnContextStartTs = txnContextStartTs,
                     txnContextCommitTs = txnContextCommitTs,
                     txnContextAborted = txnContextAborted,
                     txnContextKeys = txnContextKeys, txnContextPreds = txnContextPreds}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   txnContextStartTs),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   txnContextCommitTs),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   txnContextAborted),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      txnContextKeys)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      txnContextPreds))])
        decodeMessage _
          = (Hs.pure TxnContext) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 5)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "start_ts")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "commit_ts")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "aborted")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "keys")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "preds")
                []
                "")]
 
instance HsJSONPB.ToJSONPB TxnContext where
        toJSONPB (TxnContext f1 f2 f3 f4 f5)
          = (HsJSONPB.object
               ["start_ts" .= f1, "commit_ts" .= f2, "aborted" .= f3,
                "keys" .= f4, "preds" .= f5])
        toEncodingPB (TxnContext f1 f2 f3 f4 f5)
          = (HsJSONPB.pairs
               ["start_ts" .= f1, "commit_ts" .= f2, "aborted" .= f3,
                "keys" .= f4, "preds" .= f5])
 
instance HsJSONPB.FromJSONPB TxnContext where
        parseJSONPB
          = (HsJSONPB.withObject "TxnContext"
               (\ obj ->
                  (Hs.pure TxnContext) <*> obj .: "start_ts" <*> obj .: "commit_ts"
                    <*> obj .: "aborted"
                    <*> obj .: "keys"
                    <*> obj .: "preds"))
 
instance HsJSONPB.ToJSON TxnContext where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TxnContext where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TxnContext where
        declareNamedSchema _
          = do let declare_start_ts = HsJSONPB.declareSchemaRef
               txnContextStartTs <- declare_start_ts Proxy.Proxy
               let declare_commit_ts = HsJSONPB.declareSchemaRef
               txnContextCommitTs <- declare_commit_ts Proxy.Proxy
               let declare_aborted = HsJSONPB.declareSchemaRef
               txnContextAborted <- declare_aborted Proxy.Proxy
               let declare_keys = HsJSONPB.declareSchemaRef
               txnContextKeys <- declare_keys Proxy.Proxy
               let declare_preds = HsJSONPB.declareSchemaRef
               txnContextPreds <- declare_preds Proxy.Proxy
               let _ = Hs.pure TxnContext <*> HsJSONPB.asProxy declare_start_ts
                         <*> HsJSONPB.asProxy declare_commit_ts
                         <*> HsJSONPB.asProxy declare_aborted
                         <*> HsJSONPB.asProxy declare_keys
                         <*> HsJSONPB.asProxy declare_preds
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnContext",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("start_ts", txnContextStartTs),
                                                        ("commit_ts", txnContextCommitTs),
                                                        ("aborted", txnContextAborted),
                                                        ("keys", txnContextKeys),
                                                        ("preds", txnContextPreds)]}})
 
data Check = Check{}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Check where
        nameOf _ = (Hs.fromString "Check")
 
instance HsProtobuf.HasDefault Check
 
instance HsProtobuf.Message Check where
        encodeMessage _ Check{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Check)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Check where
        toJSONPB (Check) = (HsJSONPB.object [])
        toEncodingPB (Check) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Check where
        parseJSONPB
          = (HsJSONPB.withObject "Check" (\ obj -> (Hs.pure Check)))
 
instance HsJSONPB.ToJSON Check where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Check where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Check where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Check",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Version = Version{versionTag :: Hs.Text}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Version where
        nameOf _ = (Hs.fromString "Version")
 
instance HsProtobuf.HasDefault Version
 
instance HsProtobuf.Message Version where
        encodeMessage _ Version{versionTag = versionTag}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   versionTag)])
        decodeMessage _
          = (Hs.pure Version) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "tag")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Version where
        toJSONPB (Version f1) = (HsJSONPB.object ["tag" .= f1])
        toEncodingPB (Version f1) = (HsJSONPB.pairs ["tag" .= f1])
 
instance HsJSONPB.FromJSONPB Version where
        parseJSONPB
          = (HsJSONPB.withObject "Version"
               (\ obj -> (Hs.pure Version) <*> obj .: "tag"))
 
instance HsJSONPB.ToJSON Version where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Version where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Version where
        declareNamedSchema _
          = do let declare_tag = HsJSONPB.declareSchemaRef
               versionTag <- declare_tag Proxy.Proxy
               let _ = Hs.pure Version <*> HsJSONPB.asProxy declare_tag
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Version",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("tag", versionTag)]}})
 
data Latency = Latency{latencyParsingNs :: Hs.Word64,
                       latencyProcessingNs :: Hs.Word64, latencyEncodingNs :: Hs.Word64,
                       latencyAssignTimestampNs :: Hs.Word64, latencyTotalNs :: Hs.Word64}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Latency where
        nameOf _ = (Hs.fromString "Latency")
 
instance HsProtobuf.HasDefault Latency
 
instance HsProtobuf.Message Latency where
        encodeMessage _
          Latency{latencyParsingNs = latencyParsingNs,
                  latencyProcessingNs = latencyProcessingNs,
                  latencyEncodingNs = latencyEncodingNs,
                  latencyAssignTimestampNs = latencyAssignTimestampNs,
                  latencyTotalNs = latencyTotalNs}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   latencyParsingNs),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   latencyProcessingNs),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   latencyEncodingNs),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   latencyAssignTimestampNs),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   latencyTotalNs)])
        decodeMessage _
          = (Hs.pure Latency) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "parsing_ns")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "processing_ns")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "encoding_ns")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "assign_timestamp_ns")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "total_ns")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Latency where
        toJSONPB (Latency f1 f2 f3 f4 f5)
          = (HsJSONPB.object
               ["parsing_ns" .= f1, "processing_ns" .= f2, "encoding_ns" .= f3,
                "assign_timestamp_ns" .= f4, "total_ns" .= f5])
        toEncodingPB (Latency f1 f2 f3 f4 f5)
          = (HsJSONPB.pairs
               ["parsing_ns" .= f1, "processing_ns" .= f2, "encoding_ns" .= f3,
                "assign_timestamp_ns" .= f4, "total_ns" .= f5])
 
instance HsJSONPB.FromJSONPB Latency where
        parseJSONPB
          = (HsJSONPB.withObject "Latency"
               (\ obj ->
                  (Hs.pure Latency) <*> obj .: "parsing_ns" <*>
                    obj .: "processing_ns"
                    <*> obj .: "encoding_ns"
                    <*> obj .: "assign_timestamp_ns"
                    <*> obj .: "total_ns"))
 
instance HsJSONPB.ToJSON Latency where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Latency where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Latency where
        declareNamedSchema _
          = do let declare_parsing_ns = HsJSONPB.declareSchemaRef
               latencyParsingNs <- declare_parsing_ns Proxy.Proxy
               let declare_processing_ns = HsJSONPB.declareSchemaRef
               latencyProcessingNs <- declare_processing_ns Proxy.Proxy
               let declare_encoding_ns = HsJSONPB.declareSchemaRef
               latencyEncodingNs <- declare_encoding_ns Proxy.Proxy
               let declare_assign_timestamp_ns = HsJSONPB.declareSchemaRef
               latencyAssignTimestampNs <- declare_assign_timestamp_ns Proxy.Proxy
               let declare_total_ns = HsJSONPB.declareSchemaRef
               latencyTotalNs <- declare_total_ns Proxy.Proxy
               let _ = Hs.pure Latency <*> HsJSONPB.asProxy declare_parsing_ns <*>
                         HsJSONPB.asProxy declare_processing_ns
                         <*> HsJSONPB.asProxy declare_encoding_ns
                         <*> HsJSONPB.asProxy declare_assign_timestamp_ns
                         <*> HsJSONPB.asProxy declare_total_ns
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Latency",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("parsing_ns", latencyParsingNs),
                                                        ("processing_ns", latencyProcessingNs),
                                                        ("encoding_ns", latencyEncodingNs),
                                                        ("assign_timestamp_ns",
                                                         latencyAssignTimestampNs),
                                                        ("total_ns", latencyTotalNs)]}})
 
data Metrics = Metrics{metricsNumUids :: Hs.Map Hs.Text Hs.Word64}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Metrics where
        nameOf _ = (Hs.fromString "Metrics")
 
instance HsProtobuf.HasDefault Metrics
 
instance HsProtobuf.Message Metrics where
        encodeMessage _ Metrics{metricsNumUids = metricsNumUids}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   metricsNumUids)])
        decodeMessage _
          = (Hs.pure Metrics) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Map HsProtobuf.String HsProtobuf.UInt64)
                (HsProtobuf.Single "num_uids")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Metrics where
        toJSONPB (Metrics f1) = (HsJSONPB.object ["num_uids" .= f1])
        toEncodingPB (Metrics f1) = (HsJSONPB.pairs ["num_uids" .= f1])
 
instance HsJSONPB.FromJSONPB Metrics where
        parseJSONPB
          = (HsJSONPB.withObject "Metrics"
               (\ obj -> (Hs.pure Metrics) <*> obj .: "num_uids"))
 
instance HsJSONPB.ToJSON Metrics where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Metrics where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Metrics where
        declareNamedSchema _
          = do let declare_num_uids = HsJSONPB.declareSchemaRef
               metricsNumUids <- declare_num_uids Proxy.Proxy
               let _ = Hs.pure Metrics <*> HsJSONPB.asProxy declare_num_uids
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Metrics",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("num_uids", metricsNumUids)]}})
 
data NQuad = NQuad{nquadSubject :: Hs.Text,
                   nquadPredicate :: Hs.Text, nquadObjectId :: Hs.Text,
                   nquadObjectValue :: Hs.Maybe Api.Value, nquadLabel :: Hs.Text,
                   nquadLang :: Hs.Text, nquadFacets :: Hs.Vector Api.Facet}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named NQuad where
        nameOf _ = (Hs.fromString "NQuad")
 
instance HsProtobuf.HasDefault NQuad
 
instance HsProtobuf.Message NQuad where
        encodeMessage _
          NQuad{nquadSubject = nquadSubject, nquadPredicate = nquadPredicate,
                nquadObjectId = nquadObjectId, nquadObjectValue = nquadObjectValue,
                nquadLabel = nquadLabel, nquadLang = nquadLang,
                nquadFacets = nquadFacets}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   nquadSubject),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   nquadPredicate),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   nquadObjectId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Api.Value) @(HsProtobuf.Nested Api.Value)
                      nquadObjectValue)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   nquadLabel),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   nquadLang),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   (Hs.coerce @(Hs.Vector Api.Facet) @(HsProtobuf.NestedVec Api.Facet)
                      nquadFacets))])
        decodeMessage _
          = (Hs.pure NQuad) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Api.Value))
                 @(_ (Hs.Maybe Api.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Api.Facet))
                 @(_ (Hs.Vector Api.Facet))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 7)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "subject")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "predicate")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "object_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "object_value")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "lang")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Facet")))
                (HsProtobuf.Single "facets")
                []
                "")]
 
instance HsJSONPB.ToJSONPB NQuad where
        toJSONPB (NQuad f1 f2 f3 f4 f5 f6 f7)
          = (HsJSONPB.object
               ["subject" .= f1, "predicate" .= f2, "object_id" .= f3,
                "object_value" .= f4, "label" .= f5, "lang" .= f6, "facets" .= f7])
        toEncodingPB (NQuad f1 f2 f3 f4 f5 f6 f7)
          = (HsJSONPB.pairs
               ["subject" .= f1, "predicate" .= f2, "object_id" .= f3,
                "object_value" .= f4, "label" .= f5, "lang" .= f6, "facets" .= f7])
 
instance HsJSONPB.FromJSONPB NQuad where
        parseJSONPB
          = (HsJSONPB.withObject "NQuad"
               (\ obj ->
                  (Hs.pure NQuad) <*> obj .: "subject" <*> obj .: "predicate" <*>
                    obj .: "object_id"
                    <*> obj .: "object_value"
                    <*> obj .: "label"
                    <*> obj .: "lang"
                    <*> obj .: "facets"))
 
instance HsJSONPB.ToJSON NQuad where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON NQuad where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema NQuad where
        declareNamedSchema _
          = do let declare_subject = HsJSONPB.declareSchemaRef
               nquadSubject <- declare_subject Proxy.Proxy
               let declare_predicate = HsJSONPB.declareSchemaRef
               nquadPredicate <- declare_predicate Proxy.Proxy
               let declare_object_id = HsJSONPB.declareSchemaRef
               nquadObjectId <- declare_object_id Proxy.Proxy
               let declare_object_value = HsJSONPB.declareSchemaRef
               nquadObjectValue <- declare_object_value Proxy.Proxy
               let declare_label = HsJSONPB.declareSchemaRef
               nquadLabel <- declare_label Proxy.Proxy
               let declare_lang = HsJSONPB.declareSchemaRef
               nquadLang <- declare_lang Proxy.Proxy
               let declare_facets = HsJSONPB.declareSchemaRef
               nquadFacets <- declare_facets Proxy.Proxy
               let _ = Hs.pure NQuad <*> HsJSONPB.asProxy declare_subject <*>
                         HsJSONPB.asProxy declare_predicate
                         <*> HsJSONPB.asProxy declare_object_id
                         <*> HsJSONPB.asProxy declare_object_value
                         <*> HsJSONPB.asProxy declare_label
                         <*> HsJSONPB.asProxy declare_lang
                         <*> HsJSONPB.asProxy declare_facets
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "NQuad",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("subject", nquadSubject),
                                                        ("predicate", nquadPredicate),
                                                        ("object_id", nquadObjectId),
                                                        ("object_value", nquadObjectValue),
                                                        ("label", nquadLabel), ("lang", nquadLang),
                                                        ("facets", nquadFacets)]}})
 
data Value = Value{valueVal :: Hs.Maybe ValueVal}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Value where
        nameOf _ = (Hs.fromString "Value")
 
instance HsProtobuf.HasDefault Value
 
instance HsProtobuf.Message Value where
        encodeMessage _ Value{valueVal = valueVal}
          = (Hs.mconcat
               [case valueVal of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ValueValDefaultVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y))
                             ValueValBytesVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))
                             ValueValIntVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))
                             ValueValBoolVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (HsProtobuf.ForceEmit y))
                             ValueValStrVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (HsProtobuf.ForceEmit y))
                             ValueValDoubleVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (HsProtobuf.ForceEmit y))
                             ValueValGeoVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (HsProtobuf.ForceEmit y))
                             ValueValDateVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (HsProtobuf.ForceEmit y))
                             ValueValDatetimeVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (HsProtobuf.ForceEmit y))
                             ValueValPasswordVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 10)
                                     (HsProtobuf.ForceEmit y))
                             ValueValUidVal y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 11)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure Value) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.Just Hs.. ValueValDefaultVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.Just Hs.. ValueValBytesVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. ValueValIntVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.Just Hs.. ValueValBoolVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.Just Hs.. ValueValStrVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.Just Hs.. ValueValDoubleVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 7),
                   (Hs.pure (Hs.Just Hs.. ValueValGeoVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 8),
                   (Hs.pure (Hs.Just Hs.. ValueValDateVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.Just Hs.. ValueValDatetimeVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 10),
                   (Hs.pure (Hs.Just Hs.. ValueValPasswordVal)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 11),
                   (Hs.pure (Hs.Just Hs.. ValueValUidVal)) <*>
                     HsProtobuf.decodeMessageField)])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Value where
        toJSONPB
          (Value
             f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10_or_f11)
          = (HsJSONPB.object
               [(let encodeVal
                       = (case
                            f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10_or_f11 of
                              Hs.Just (ValueValDefaultVal f1) -> (HsJSONPB.pair "default_val" f1)
                              Hs.Just (ValueValBytesVal f2) -> (HsJSONPB.pair "bytes_val" f2)
                              Hs.Just (ValueValIntVal f3) -> (HsJSONPB.pair "int_val" f3)
                              Hs.Just (ValueValBoolVal f4) -> (HsJSONPB.pair "bool_val" f4)
                              Hs.Just (ValueValStrVal f5) -> (HsJSONPB.pair "str_val" f5)
                              Hs.Just (ValueValDoubleVal f6) -> (HsJSONPB.pair "double_val" f6)
                              Hs.Just (ValueValGeoVal f7) -> (HsJSONPB.pair "geo_val" f7)
                              Hs.Just (ValueValDateVal f8) -> (HsJSONPB.pair "date_val" f8)
                              Hs.Just (ValueValDatetimeVal f9)
                                -> (HsJSONPB.pair "datetime_val" f9)
                              Hs.Just (ValueValPasswordVal f10)
                                -> (HsJSONPB.pair "password_val" f10)
                              Hs.Just (ValueValUidVal f11) -> (HsJSONPB.pair "uid_val" f11)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("val" .= (HsJSONPB.objectOrNull [encodeVal] options)) options else
                       encodeVal options)])
        toEncodingPB
          (Value
             f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10_or_f11)
          = (HsJSONPB.pairs
               [(let encodeVal
                       = (case
                            f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10_or_f11 of
                              Hs.Just (ValueValDefaultVal f1) -> (HsJSONPB.pair "default_val" f1)
                              Hs.Just (ValueValBytesVal f2) -> (HsJSONPB.pair "bytes_val" f2)
                              Hs.Just (ValueValIntVal f3) -> (HsJSONPB.pair "int_val" f3)
                              Hs.Just (ValueValBoolVal f4) -> (HsJSONPB.pair "bool_val" f4)
                              Hs.Just (ValueValStrVal f5) -> (HsJSONPB.pair "str_val" f5)
                              Hs.Just (ValueValDoubleVal f6) -> (HsJSONPB.pair "double_val" f6)
                              Hs.Just (ValueValGeoVal f7) -> (HsJSONPB.pair "geo_val" f7)
                              Hs.Just (ValueValDateVal f8) -> (HsJSONPB.pair "date_val" f8)
                              Hs.Just (ValueValDatetimeVal f9)
                                -> (HsJSONPB.pair "datetime_val" f9)
                              Hs.Just (ValueValPasswordVal f10)
                                -> (HsJSONPB.pair "password_val" f10)
                              Hs.Just (ValueValUidVal f11) -> (HsJSONPB.pair "uid_val" f11)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("val" .= (HsJSONPB.pairsOrNull [encodeVal] options)) options else
                       encodeVal options)])
 
instance HsJSONPB.FromJSONPB Value where
        parseJSONPB
          = (HsJSONPB.withObject "Value"
               (\ obj ->
                  (Hs.pure Value) <*>
                    (let parseVal parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ValueValDefaultVal <$>
                                  (HsJSONPB.parseField parseObj "default_val"),
                                Hs.Just Hs.. ValueValBytesVal <$>
                                  (HsJSONPB.parseField parseObj "bytes_val"),
                                Hs.Just Hs.. ValueValIntVal <$>
                                  (HsJSONPB.parseField parseObj "int_val"),
                                Hs.Just Hs.. ValueValBoolVal <$>
                                  (HsJSONPB.parseField parseObj "bool_val"),
                                Hs.Just Hs.. ValueValStrVal <$>
                                  (HsJSONPB.parseField parseObj "str_val"),
                                Hs.Just Hs.. ValueValDoubleVal <$>
                                  (HsJSONPB.parseField parseObj "double_val"),
                                Hs.Just Hs.. ValueValGeoVal <$>
                                  (HsJSONPB.parseField parseObj "geo_val"),
                                Hs.Just Hs.. ValueValDateVal <$>
                                  (HsJSONPB.parseField parseObj "date_val"),
                                Hs.Just Hs.. ValueValDatetimeVal <$>
                                  (HsJSONPB.parseField parseObj "datetime_val"),
                                Hs.Just Hs.. ValueValPasswordVal <$>
                                  (HsJSONPB.parseField parseObj "password_val"),
                                Hs.Just Hs.. ValueValUidVal <$>
                                  (HsJSONPB.parseField parseObj "uid_val"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "val") Hs.>>= (HsJSONPB.withObject "val" parseVal)) <|>
                         (parseVal obj))))
 
instance HsJSONPB.ToJSON Value where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Value where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Value where
        declareNamedSchema _
          = do let declare_val = HsJSONPB.declareSchemaRef
               valueVal <- declare_val Proxy.Proxy
               let _ = Hs.pure Value <*> HsJSONPB.asProxy declare_val
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Value",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList [("val", valueVal)]}})
 
data ValueVal = ValueValDefaultVal Hs.Text
              | ValueValBytesVal Hs.ByteString
              | ValueValIntVal Hs.Int64
              | ValueValBoolVal Hs.Bool
              | ValueValStrVal Hs.Text
              | ValueValDoubleVal Hs.Double
              | ValueValGeoVal Hs.ByteString
              | ValueValDateVal Hs.ByteString
              | ValueValDatetimeVal Hs.ByteString
              | ValueValPasswordVal Hs.Text
              | ValueValUidVal Hs.Word64
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ValueVal where
        nameOf _ = (Hs.fromString "ValueVal")
 
instance HsJSONPB.ToSchema ValueVal where
        declareNamedSchema _
          = do let declare_default_val = HsJSONPB.declareSchemaRef
               valueValDefaultVal <- declare_default_val Proxy.Proxy
               let _ = Hs.pure ValueValDefaultVal <*>
                         HsJSONPB.asProxy declare_default_val
               let declare_bytes_val = HsJSONPB.declareSchemaRef
               valueValBytesVal <- declare_bytes_val Proxy.Proxy
               let _ = Hs.pure ValueValBytesVal <*>
                         HsJSONPB.asProxy declare_bytes_val
               let declare_int_val = HsJSONPB.declareSchemaRef
               valueValIntVal <- declare_int_val Proxy.Proxy
               let _ = Hs.pure ValueValIntVal <*> HsJSONPB.asProxy declare_int_val
               let declare_bool_val = HsJSONPB.declareSchemaRef
               valueValBoolVal <- declare_bool_val Proxy.Proxy
               let _ = Hs.pure ValueValBoolVal <*>
                         HsJSONPB.asProxy declare_bool_val
               let declare_str_val = HsJSONPB.declareSchemaRef
               valueValStrVal <- declare_str_val Proxy.Proxy
               let _ = Hs.pure ValueValStrVal <*> HsJSONPB.asProxy declare_str_val
               let declare_double_val = HsJSONPB.declareSchemaRef
               valueValDoubleVal <- declare_double_val Proxy.Proxy
               let _ = Hs.pure ValueValDoubleVal <*>
                         HsJSONPB.asProxy declare_double_val
               let declare_geo_val = HsJSONPB.declareSchemaRef
               valueValGeoVal <- declare_geo_val Proxy.Proxy
               let _ = Hs.pure ValueValGeoVal <*> HsJSONPB.asProxy declare_geo_val
               let declare_date_val = HsJSONPB.declareSchemaRef
               valueValDateVal <- declare_date_val Proxy.Proxy
               let _ = Hs.pure ValueValDateVal <*>
                         HsJSONPB.asProxy declare_date_val
               let declare_datetime_val = HsJSONPB.declareSchemaRef
               valueValDatetimeVal <- declare_datetime_val Proxy.Proxy
               let _ = Hs.pure ValueValDatetimeVal <*>
                         HsJSONPB.asProxy declare_datetime_val
               let declare_password_val = HsJSONPB.declareSchemaRef
               valueValPasswordVal <- declare_password_val Proxy.Proxy
               let _ = Hs.pure ValueValPasswordVal <*>
                         HsJSONPB.asProxy declare_password_val
               let declare_uid_val = HsJSONPB.declareSchemaRef
               valueValUidVal <- declare_uid_val Proxy.Proxy
               let _ = Hs.pure ValueValUidVal <*> HsJSONPB.asProxy declare_uid_val
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ValueVal",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("default_val", valueValDefaultVal),
                                                        ("bytes_val", valueValBytesVal),
                                                        ("int_val", valueValIntVal),
                                                        ("bool_val", valueValBoolVal),
                                                        ("str_val", valueValStrVal),
                                                        ("double_val", valueValDoubleVal),
                                                        ("geo_val", valueValGeoVal),
                                                        ("date_val", valueValDateVal),
                                                        ("datetime_val", valueValDatetimeVal),
                                                        ("password_val", valueValPasswordVal),
                                                        ("uid_val", valueValUidVal)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Facet = Facet{facetKey :: Hs.Text,
                   facetValue :: Hs.ByteString,
                   facetValType :: HsProtobuf.Enumerated Api.Facet_ValType,
                   facetTokens :: Hs.Vector Hs.Text, facetAlias :: Hs.Text}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Facet where
        nameOf _ = (Hs.fromString "Facet")
 
instance HsProtobuf.HasDefault Facet
 
instance HsProtobuf.Message Facet where
        encodeMessage _
          Facet{facetKey = facetKey, facetValue = facetValue,
                facetValType = facetValType, facetTokens = facetTokens,
                facetAlias = facetAlias}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   facetKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   facetValue),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   facetValType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      facetTokens)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   facetAlias)])
        decodeMessage _
          = (Hs.pure Facet) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "value")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "ValType")))
                (HsProtobuf.Single "val_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "tokens")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "alias")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Facet where
        toJSONPB (Facet f1 f2 f3 f4 f5)
          = (HsJSONPB.object
               ["key" .= f1, "value" .= f2, "val_type" .= f3, "tokens" .= f4,
                "alias" .= f5])
        toEncodingPB (Facet f1 f2 f3 f4 f5)
          = (HsJSONPB.pairs
               ["key" .= f1, "value" .= f2, "val_type" .= f3, "tokens" .= f4,
                "alias" .= f5])
 
instance HsJSONPB.FromJSONPB Facet where
        parseJSONPB
          = (HsJSONPB.withObject "Facet"
               (\ obj ->
                  (Hs.pure Facet) <*> obj .: "key" <*> obj .: "value" <*>
                    obj .: "val_type"
                    <*> obj .: "tokens"
                    <*> obj .: "alias"))
 
instance HsJSONPB.ToJSON Facet where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Facet where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Facet where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               facetKey <- declare_key Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               facetValue <- declare_value Proxy.Proxy
               let declare_val_type = HsJSONPB.declareSchemaRef
               facetValType <- declare_val_type Proxy.Proxy
               let declare_tokens = HsJSONPB.declareSchemaRef
               facetTokens <- declare_tokens Proxy.Proxy
               let declare_alias = HsJSONPB.declareSchemaRef
               facetAlias <- declare_alias Proxy.Proxy
               let _ = Hs.pure Facet <*> HsJSONPB.asProxy declare_key <*>
                         HsJSONPB.asProxy declare_value
                         <*> HsJSONPB.asProxy declare_val_type
                         <*> HsJSONPB.asProxy declare_tokens
                         <*> HsJSONPB.asProxy declare_alias
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Facet",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", facetKey), ("value", facetValue),
                                                        ("val_type", facetValType),
                                                        ("tokens", facetTokens),
                                                        ("alias", facetAlias)]}})
 
data Facet_ValType = Facet_ValTypeSTRING
                   | Facet_ValTypeINT
                   | Facet_ValTypeFLOAT
                   | Facet_ValTypeBOOL
                   | Facet_ValTypeDATETIME
                   deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Facet_ValType where
        nameOf _ = (Hs.fromString "Facet_ValType")
 
instance HsProtobuf.HasDefault Facet_ValType
 
instance Hs.Bounded Facet_ValType where
        minBound = Facet_ValTypeSTRING
        maxBound = Facet_ValTypeDATETIME
 
instance Hs.Ord Facet_ValType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum Facet_ValType where
        toProtoEnumMay 0 = Hs.Just Facet_ValTypeSTRING
        toProtoEnumMay 1 = Hs.Just Facet_ValTypeINT
        toProtoEnumMay 2 = Hs.Just Facet_ValTypeFLOAT
        toProtoEnumMay 3 = Hs.Just Facet_ValTypeBOOL
        toProtoEnumMay 4 = Hs.Just Facet_ValTypeDATETIME
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (Facet_ValTypeSTRING) = 0
        fromProtoEnum (Facet_ValTypeINT) = 1
        fromProtoEnum (Facet_ValTypeFLOAT) = 2
        fromProtoEnum (Facet_ValTypeBOOL) = 3
        fromProtoEnum (Facet_ValTypeDATETIME) = 4
 
instance HsJSONPB.ToJSONPB Facet_ValType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB Facet_ValType where
        parseJSONPB (HsJSONPB.String "STRING")
          = Hs.pure Facet_ValTypeSTRING
        parseJSONPB (HsJSONPB.String "INT") = Hs.pure Facet_ValTypeINT
        parseJSONPB (HsJSONPB.String "FLOAT") = Hs.pure Facet_ValTypeFLOAT
        parseJSONPB (HsJSONPB.String "BOOL") = Hs.pure Facet_ValTypeBOOL
        parseJSONPB (HsJSONPB.String "DATETIME")
          = Hs.pure Facet_ValTypeDATETIME
        parseJSONPB v = (HsJSONPB.typeMismatch "Facet_ValType" v)
 
instance HsJSONPB.ToJSON Facet_ValType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Facet_ValType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite Facet_ValType
 
data LoginRequest = LoginRequest{loginRequestUserid :: Hs.Text,
                                 loginRequestPassword :: Hs.Text,
                                 loginRequestRefreshToken :: Hs.Text}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LoginRequest where
        nameOf _ = (Hs.fromString "LoginRequest")
 
instance HsProtobuf.HasDefault LoginRequest
 
instance HsProtobuf.Message LoginRequest where
        encodeMessage _
          LoginRequest{loginRequestUserid = loginRequestUserid,
                       loginRequestPassword = loginRequestPassword,
                       loginRequestRefreshToken = loginRequestRefreshToken}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   loginRequestUserid),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   loginRequestPassword),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   loginRequestRefreshToken)])
        decodeMessage _
          = (Hs.pure LoginRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "userid")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "password")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "refresh_token")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LoginRequest where
        toJSONPB (LoginRequest f1 f2 f3)
          = (HsJSONPB.object
               ["userid" .= f1, "password" .= f2, "refresh_token" .= f3])
        toEncodingPB (LoginRequest f1 f2 f3)
          = (HsJSONPB.pairs
               ["userid" .= f1, "password" .= f2, "refresh_token" .= f3])
 
instance HsJSONPB.FromJSONPB LoginRequest where
        parseJSONPB
          = (HsJSONPB.withObject "LoginRequest"
               (\ obj ->
                  (Hs.pure LoginRequest) <*> obj .: "userid" <*> obj .: "password"
                    <*> obj .: "refresh_token"))
 
instance HsJSONPB.ToJSON LoginRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LoginRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LoginRequest where
        declareNamedSchema _
          = do let declare_userid = HsJSONPB.declareSchemaRef
               loginRequestUserid <- declare_userid Proxy.Proxy
               let declare_password = HsJSONPB.declareSchemaRef
               loginRequestPassword <- declare_password Proxy.Proxy
               let declare_refresh_token = HsJSONPB.declareSchemaRef
               loginRequestRefreshToken <- declare_refresh_token Proxy.Proxy
               let _ = Hs.pure LoginRequest <*> HsJSONPB.asProxy declare_userid
                         <*> HsJSONPB.asProxy declare_password
                         <*> HsJSONPB.asProxy declare_refresh_token
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LoginRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("userid", loginRequestUserid),
                                                        ("password", loginRequestPassword),
                                                        ("refresh_token",
                                                         loginRequestRefreshToken)]}})
 
data Jwt = Jwt{jwtAccessJwt :: Hs.Text, jwtRefreshJwt :: Hs.Text}
         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Jwt where
        nameOf _ = (Hs.fromString "Jwt")
 
instance HsProtobuf.HasDefault Jwt
 
instance HsProtobuf.Message Jwt where
        encodeMessage _
          Jwt{jwtAccessJwt = jwtAccessJwt, jwtRefreshJwt = jwtRefreshJwt}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   jwtAccessJwt),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   jwtRefreshJwt)])
        decodeMessage _
          = (Hs.pure Jwt) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "access_jwt")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "refresh_jwt")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Jwt where
        toJSONPB (Jwt f1 f2)
          = (HsJSONPB.object ["access_jwt" .= f1, "refresh_jwt" .= f2])
        toEncodingPB (Jwt f1 f2)
          = (HsJSONPB.pairs ["access_jwt" .= f1, "refresh_jwt" .= f2])
 
instance HsJSONPB.FromJSONPB Jwt where
        parseJSONPB
          = (HsJSONPB.withObject "Jwt"
               (\ obj ->
                  (Hs.pure Jwt) <*> obj .: "access_jwt" <*> obj .: "refresh_jwt"))
 
instance HsJSONPB.ToJSON Jwt where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Jwt where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Jwt where
        declareNamedSchema _
          = do let declare_access_jwt = HsJSONPB.declareSchemaRef
               jwtAccessJwt <- declare_access_jwt Proxy.Proxy
               let declare_refresh_jwt = HsJSONPB.declareSchemaRef
               jwtRefreshJwt <- declare_refresh_jwt Proxy.Proxy
               let _ = Hs.pure Jwt <*> HsJSONPB.asProxy declare_access_jwt <*>
                         HsJSONPB.asProxy declare_refresh_jwt
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Jwt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("access_jwt", jwtAccessJwt),
                                                        ("refresh_jwt", jwtRefreshJwt)]}})